"""
Django settings for sunghwan_app project.

Generated by 'django-admin startproject' using Django 1.10.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""
import json
import os
import sys
import json


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'quamk5m$#5x-=xc17$(4al3bq4q3d_(=k%h6)-v4trvme#!d9m'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = (len(sys.argv) > 1 and sys.argv[1] == 'runserver')

ALLOWED_HOSTS = [
    '.stonehead-studio.com',
    '.elasticbeanstalk.com',
]

LOGIN_URL = '/login/'

# user definition
AUTH_USER_MODEL = 'member.CustomUser'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'storages',
    'member',
    'sunghwan_park',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'sunghwan_app.urls'



## template
TEMPLATES_DIR = os.path.join(BASE_DIR, 'templates')
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            TEMPLATES_DIR,
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sunghwan_app.wsgi.application'





# .conf > NAVER api
CONF_DIR = os.path.join(BASE_DIR, '.conf')
config = json.loads(open(os.path.join(CONF_DIR, 'naver_movie_api.json')).read())

CLIENT_ID = config['client_id']
CLIENT_SECRET = config['client_secret']



# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases
if DEBUG:
    config = json.loads(open(os.path.join(CONF_DIR, 'settings_debug.json')).read())
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }
else:
    config = json.loads(open(os.path.join(CONF_DIR, 'settings_deploy.json')).read())
    DATABASES = config['databases']
    AWS = config['AWS']


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, "static")

""""""
AWS_STORAGE_BUCKET_NAME = 'bw-project'
AWS_ACCESS_KEY_ID = AWS['AWS_ACCESS_KEY']
AWS_SECRET_ACCESS_KEY = AWS["AWS_SECRET_ACCESS_KEY"]

# Tell django-storages that when coming up with the URL for an item in S3 storage, keep
# it simple - just use this domain plus the path. (If this isn't set, things get complicated).
# This controls how the `static` template tag from `staticfiles` gets expanded, if you're using it.
# We also use it in the next setting.
AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME

# This is used by the `static` template tag from `static`, if you're using that. Or if anything else
# refers directly to STATIC_URL. So it's safest to always set it.
STATIC_URL = "https://%s/" % AWS_S3_CUSTOM_DOMAIN

# Tell the staticfiles app to use S3Boto storage when writing the collected static files (when
# you run `collectstatic`).
STATICFILES_STORAGE = 'storages.backends.s3boto.S3BotoStorage'
""""""


# STATIC_S3 = True
#
# if not DEBUG or STATIC_S3:
#     AWS_HEADERS = {
#         'Expires': 'Thu, 31 Dec 2199 20:00:00 GMT',
#         'Cache-Control': 'max-age=94608000',
#     }
#     AWS_STORAGE_BUCKET_NAME = 'bw-project'
#     AWS_ACCESS_KEY_ID = AWS['AWS_ACCESS_KEY']
#     AWS_SECRET_ACCESS_KEY = AWS["AWS_SECRET_ACCESS_KEY"]
#     AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME
#
#     STATICFILES_LOCATION = 'static'
#     STATIC_URL = "https://%s/%s/" % (AWS_S3_CUSTOM_DOMAIN, STATICFILES_LOCATION)
#     STATICFILES_STORAGE = 'mysite.custom_storages.StaticStorage'
#
#     MEDIAFILES_LOCATION = 'media'
#     MEDIA_URL = "https://%s/%s/" % (AWS_S3_CUSTOM_DOMAIN, MEDIAFILES_LOCATION)
#     DEFAULT_FILE_STORAGE = 'mysite.custom_storages.MediaStorage'
# else:
#     MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
#     STATIC_URL = '/static/'
#     MEDIA_URL = '/media/'




AWS_HEADERS = {  # see http://developer.yahoo.com/performance/rules.html#expires
    'Expires': 'Thu, 31 Dec 2099 20:00:00 GMT',
    'Cache-Control': 'max-age=94608000',
}

STATIC_DIR = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = [
    STATIC_DIR,
]

# media root
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'www', 'media')


